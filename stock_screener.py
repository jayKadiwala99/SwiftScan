# -*- coding: utf-8 -*-
"""Stock Screener.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YhOcrrdwE_rHNEI-qeWNaYwqpjpnjXiK
"""

import yfinance as yf
import pandas as pd, numpy as np, matplotlib.pyplot as plt
import math
from sklearn.metrics import mean_squared_error, mean_absolute_error
from datetime import datetime,date

#!unzip DATA.zip -d ..
#!zip -r /content/DATA.zip /content/DATA

#data = yf.download('RELIANCE.NS')

#data.to_csv('RELIANCE.csv')

equity_files = pd.read_csv('EQUITY_L.csv')
print(equity_files)

"""from datetime import datetime,date

start_date = date(2015,1,1)
end_date = date.today()
#print(end_date)

data = yf.download('RELIANCE.NS',start = start_date, end=end_date)

#data.to_csv('RELIANCE.csv')"""

start_date = date(2015,1,1)
end_date = date.today()

for equity_name in equity_files.SYMBOL:
  data = yf.download(f'{equity_name}.NS',start = start_date, end=end_date)
  data.to_csv(f'./DATA/{equity_name}.csv')

data = pd.read_csv('DATA/RELIANCE.csv')

print(data)

data

equity_files = pd.read_csv('EQUITY_L.csv')
bullish_stocks = []
bearish_stocks = []
for equity in equity_files.SYMBOL:
  data = pd.read_csv(f'DATA/{equity}.csv')

  data['SMA20'] = data['Close'].rolling(window=20).mean()
  data['SMA50'] = data['Close'].rolling(window=50).mean()

  data['golden_cross'] = (data['SMA20'] > data['SMA50']) & ( data['SMA20'].shift(1) < data['SMA50'].shift(1))
  data['death_cross'] = (data['SMA20'] < data['SMA50']) & ( data['SMA20'].shift(1) > data['SMA50'].shift(1))

  #show_graph(data)
  #break
  if any(data['golden_cross'].tail(15)):
    bullish_stocks.append(equity)
  elif any(data['death_cross'].tail(15)):
    bearish_stocks.append(equity)


  #plt.figure(figsize=(12, 6))
  #plt.plot(data['Close'], label='Close', color='black')


  #plt.plot(data['Date'], data['SMA20'], label='SMA20')
  #plt.plot(data['Date'], data['SMA50'], label='SMA50')
  # Plotting golden cross and death cross points
  #plt.plot(data[data['golden_cross'] == 1]['Date'],data[data['golden_cross'] == 1]['SMA20'],'^', markersize=10 , color='blue', label='Golden Cross')
  #plt.plot(data[data['death_cross'] == 1]['Date'],data[data['death_cross'] == 1]['SMA50'],'v', markersize=10, color='red', label='Death Cross')

  #plt.title('Golden and Death Crosses')
  #plt.xlabel('Date')
  #plt.ylabel('Price')
  #plt.legend()
  #plt.grid(True)
  #plt.show()
  #break

print(bullish_stocks)
print(bearish_stocks)

def show_graph(data):
  plt.figure(figsize=(12, 6))
  plt.plot(data['Close'], label='Close', color='black')


  plt.plot(data['Date'], data['SMA20'], label='SMA20')
  plt.plot(data['Date'], data['SMA50'], label='SMA50')
  # Plotting golden cross and death cross points
  plt.plot(data[data['golden_cross'] == 1]['Date'],data[data['golden_cross'] == 1]['SMA20'],'^', markersize=10 , color='blue', label='Golden Cross')
  plt.plot(data[data['death_cross'] == 1]['Date'],data[data['death_cross'] == 1]['SMA50'],'v', markersize=10, color='red', label='Death Cross')

  plt.title('Golden and Death Crosses')
  plt.xlabel('Date')
  plt.ylabel('Price')
  plt.legend()
  plt.grid(True)
  plt.show()

# Create DataFrames from the lists
bullish_df = pd.DataFrame({'Stocks': bullish_stocks, 'Sentiment': 'Bullish'})
bearish_df = pd.DataFrame({'Stocks': bearish_stocks, 'Sentiment': 'Bearish'})

# Concatenate both DataFrames
report_df = pd.concat([bullish_df, bearish_df], ignore_index=True)

for i in report_df['Stocks']:
  i = 'DATA/' + i + '.csv'
  my_data = pd.read_csv(i)
  report_df['Daily_Return'] = my_data['Close'].pct_change()
  # Calculate volatility (standard deviation of daily returns)
  report_df['volatility'] = my_data['Daily_Return'].std()


#print(report_df)
# Save merged DataFrame to a single CSV file
#report_df.to_csv('report.csv', index=False)

print(report_df)

# List of stocks

# Create a DataFrame to store the volatility values
volatility_df = pd.DataFrame(columns=['Bullish Stock', 'Volatility Bullish'])

# Calculate volatility for the last 5 days for each stock
for stock in bullish_stocks:
    try:
        # Download data for the stock
        stock_data = yf.download(stock+'.NS', period='5d', interval='1d')['Close']

        # Calculate daily returns
        daily_returns = stock_data.pct_change()

        # Calculate volatility
        volatility = daily_returns.std()

        # Append to DataFrame
        volatility_df = volatility_df.append({'Bullish Stock': stock, 'Volatility Bullish': volatility*100}, ignore_index=True)

    except Exception as e:
        print(f"Error fetching data for {stock}: {e}")

# Save the DataFrame to a CSV file
#volatility_df.to_csv('stock_volatility.csv', index=False)
#print(volatility_df)

volatility_df = volatility_df.sort_values(by='Volatility Bullish', ascending=False)

print(volatility_df)

# List of stocks

# Create a DataFrame to store the volatility values
volatility_df_1 = pd.DataFrame(columns=['Bearish Stock', 'Volatility Bearish'])

# Calculate volatility for the last 5 days for each stock
for stock_1 in bearish_stocks:
    try:
        # Download data for the stock
        stock_data_1 = yf.download(stock_1+'.NS', period='5d', interval='1d')['Close']

        # Calculate daily returns
        daily_returns_1 = stock_data_1.pct_change()

        # Calculate volatility
        volatility_1 = daily_returns_1.std()

        # Append to DataFrame
        volatility_df_1 = volatility_df_1.append({'Bearish Stock': stock_1, 'Volatility Bearish': volatility_1*100}, ignore_index=True)

    except Exception as e:
        print(f"Error fetching data for {stock}: {e}")

# Save the DataFrame to a CSV file
#volatility_df.to_csv('stock_volatility.csv', index=False)
volatility_df_1 = volatility_df_1.sort_values(by='Volatility Bearish', ascending=False)
print(volatility_df_1)

volatility_df_1 = volatility_df_1.sort_values(by='Volatility Bearish', ascending=False)
print(volatility_df_1)

volatility_df = volatility_df.reset_index(drop=True)
volatility_df_1 = volatility_df_1.reset_index(drop=True)

# Concatenate the DataFrames along columns
report = pd.concat([volatility_df, volatility_df_1], axis=1)
report.to_csv('report.csv', index=False)
print(report)

import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense

# Assuming df is your DataFrame with a column named 'Close' for closing prices
# Replace this with your actual DataFrame and column name

# For this example, let's create a DataFrame with random data (replace this with your data)
#np.random.seed(42)
#data = np.random.randint(100, 200, 500)  # Replace this with your actual closing prices
#df = pd.DataFrame({'Close': data})
df = pd.read_csv(f'DATA/{name}.csv')

# Normalize the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df[['Close']])

# Prepare data for LSTM model
def prepare_data(data, n_steps):
    X, y = [], []
    for i in range(len(data) - n_steps):
        X.append(data[i:(i + n_steps), 0])
        y.append(data[i + n_steps, 0])
    return np.array(X), np.array(y)

n_steps = 20  # Number of previous days to use for prediction
X, y = prepare_data(scaled_data, n_steps)

# Reshape data for LSTM (samples, time steps, features)
X = X.reshape(X.shape[0], X.shape[1], 1)

# Create LSTM model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(n_steps, 1)))
model.add(LSTM(units=50))
model.add(Dense(units=1))
model.compile(optimizer='adam', loss='mean_squared_error')

# Fit the model
model.fit(X, y, epochs=50, batch_size=32)

# Prepare the last n_steps days from the DataFrame for prediction
last_n_days = df['Close'].tail(n_steps).values.reshape(1, -1)
last_n_days = last_n_days.reshape(20,1)
last_n_days = scaler.transform(last_n_days).reshape(1, n_steps, 1)



# Predict the next day's stock price
predicted_price = model.predict(last_n_days)
predicted_price = scaler.inverse_transform(predicted_price)

print("Predicted price for the next day:", predicted_price[0][0])

print(last_n_days.reshape(20,1))

# ... (code for training the model)

# Save the model
model.save('stock_price_prediction_model.h5')



# actual_data = df['Close'].values
# predicted_data = np.append(actual_data[-n_steps:], predicted_price[0][0])  # Combine actual and predicted values

# plt.figure(figsize=(10, 6))
# plt.plot(df['Date'],actual_data, label='Actual')
# plt.plot(np.arange(len(actual_data) - n_steps, len(actual_data) + 1), predicted_data, label='Predicted', marker='o')
# plt.xlabel('Day')
# plt.ylabel('Stock Price')
# plt.title('Actual vs Predicted Stock Price')
# plt.legend()
# plt.show()



data

data['SMA20'] = data['Close'].rolling(window=20).mean()
data['SMA50'] = data['Close'].rolling(window=50).mean()

# Find crossover points: 20-day SMA crosses above 50-day SMA (golden cross)
#golden_cross = (sma_20 > sma_50) & (sma_20.shift(1) < sma_50.shift(1))

# Find crossover points: 20-day SMA crosses below 50-day SMA (death cross)
#death_cross = (sma_20 < sma_50) & (sma_20.shift(1) > sma_50.shift(1))

data['golden_cross'] = (data['SMA20'] > data['SMA50']) & ( data['SMA20'].shift(1) < data['SMA50'].shift(1))

data['death_cross'] = (data['SMA20'] < data['SMA50']) & ( data['SMA20'].shift(1) > data['SMA50'].shift(1))

data.index

# Plotting the closing prices and SMAs
plt.figure(figsize=(12, 6))

plt.plot(data['Close'], label='Close', color='black')


plt.plot(data['Date'], data['SMA20'], label='SMA20')
plt.plot(data['Date'], data['SMA50'], label='SMA50')
# Plotting golden cross and death cross points
plt.plot(data[data['golden_cross'] == 1]['Date'],data[data['golden_cross'] == 1]['SMA20'],'^', markersize=10 , color='blue', label='Golden Cross')
plt.plot(data[data['death_cross'] == 1]['Date'],data[data['death_cross'] == 1]['SMA50'],'v', markersize=10, color='red', label='Death Cross')



plt.title('Golden and Death Crosses')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.grid(True)
plt.show()

"""plt.plot(data['Close'], label='Closing Prices')
plt.plot(data['SMA20'], label='20-day SMA')
plt.plot(data['SMA50'], label='50-day SMA')

# Highlighting crossover points (golden and death crosses)
plt.plot(data['golden_cross'], '^', markersize=10, color='g', label='Golden Cross')
plt.plot(data['death_cross'], 'v', markersize=10, color='r', label='Death Cross')

plt.legend()
plt.title('20-day and 50-day SMA Crossovers')
plt.xlabel('Time')
plt.ylabel('Price')
plt.grid(True)
plt.show()"""